#!/usr/bin/env perl

=head1 NAME

tb - Toolbox helper script for Fedora Silverblue

=head1 VERSION

version 0.9.1

=head1 SYNOPSIS

    tb [OPTIONS]... NUMBER COMMAND ARGUMENTS

    -r, --run                # run command inside toolbox
    -l, --list               # list installed toolboxes
    -f, --force              # force changing of hostname when toolbox is already running
    -v, --verbose            # use verbose mode
    -d, --debug              # use debug mode (for development)
    --version                # print version information
    -?, --help               # print this help message

Where I<NUMBER> is the number assigned to the toolbox you wish to enter, and I<COMMAND> is the command you wish to run inside the toolbox, followed by any arguments (requires --run switch to be specified).

Examples:

    tb 1                     # enter toolbox 1
    tb --run 2 /usr/bin/vim  # run '/usr/bin/vim' inside toolbox 2
    tb -l                    # prints contents of ~/.tb-perl file
    tb -r -- 3 nano -w %F    # run 'nano -w %F' inside toolbox 3

Note the double dashes in the final example, which tell tb to stop searching for options and to pass through '-w' as an argument to 'nano'. These are only required if any of the arguments following the command to run begin with dashes.

=head1 DESCRIPTION

This program was primarily designed to wrap Silverblue's toolbox utility and allow hostnames other than "toolbox". Additionally, the assignment of numbers to toolboxes makes command line usage faster and more convenient.

To work around L<this bug|https://github.com/containers/toolbox/issues/586>, set the hostname of the application's toolbox to your system hostname. Windows will now group correctly when apps are pinned in GNOME shell.

=head2 CONFIGURATION

Numbers are assigned to toolboxes via the tb-perl config file searched for in $XDG_CONFIG_HOME, falling back to ~/.config. Per line syntax is as follows:

    <toolbox name> <hostname>

Parts of each line are separated by spaces, with a newline for the next entry. Line number determines toolbox number. If a hostname is unspecified, it will default to the toolbox name. An example of a .tb-perl file:

    perl-dev perl-x550cc  # perl-dev is toolbox 1, hostname perl-x550cc
    java-dev java-x550cc  # java-dev is toolbox 2, hostname java-x550cc
    python-dev            # python-dev is toolbox 3, hostname python-dev

In this way, environment variables in your .bashrc can be set either machine wide (usin a regexp to match 'x550cc', in this case) or toolbox specific ('java', 'python', etc), and your toolboxes will still set your machine vars.

=head1 AUTHORS

=over 4

=item *

Michael Suzzi <msuz.code@gmail.com>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2021 by Michael Suzzi.

This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.

=cut

# 5.10.0 required for say
# 5.11.3 required for link text in Pod
use 5.11.3;

use strict;
use warnings;

use Data::Dumper qw(Dumper);
use Getopt::Long qw(:config auto_version auto_help);
use Pod::Usage;

# Odd version numbers are unstable
our $VERSION = '0.9.1';

# Main subroutine
sub main (@) {
    my ($run, $list, $verb, $dbg, $force, $tb, $cmd, $args) = @_;

    # Locate config file
    my $dot;
    if (defined $ENV{"XDG_CONFIG_HOME"}) {
	$dot = $ENV{"XDG_CONFIG_HOME"} . "/tb-perl";
    } else {
	$dot = $ENV{"HOME"} . "/.config/tb-perl";
    }
    
    $dbg && print Dumper \@_;

    my @config = load_dotfile($dot);
    $verb && say("Successfully loaded " . @config .
		 " config file entries.");
    $dbg && print Dumper \@config;

    # If in list mode
    if ($list) {
	say "#  " . "Toolbox             " . "Hostname            ";
	
	# Format cannot be indented
	my $line = 1;
	my $key;
	format LIST =
@< @<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<
$line, $key, $config[$line-1]{$key}
.
	select STDOUT;
	$~ = "LIST";
	
	# Write format to STDOUT
	for (my $length = @config; $line != $length; $line++) {
	    $key = (keys %{ $config[$line-1]})[0];
	    $dbg && say "Current working key: $key";
	    write;
	}
	exit 0;
	
    # If in run or toolbox enter mode
    } elsif ($run || $tb) {
	my $tb_to_enter = (keys %{ $config[$tb-1] })[0];
	my $host = $config[$tb-1]{$tb_to_enter};

	if (!$force && tb_running($tb_to_enter)) {
	    $verb && say "Toolbox \"$tb_to_enter\" already running; not setting",
                         " hostname. Use --force switch to override";
	} else {
	    $verb && say "Setting \"$tb_to_enter\" hostname to \"$host\"...";
	    system("toolbox", "run", "-c", $tb_to_enter, "sudo", "hostname",
		   "$host")
	      and error_die("fail_enter", $tb_to_enter);
	    $verb && say "Success!";
	}

	my @runlist = ("toolbox");
	$verb && push @runlist, "--verbose";
        if ($run) {
	    push @runlist, "run", "-c", $tb_to_enter, $cmd;
	    if (scalar @$args) {  # Check that @args has elements
		push @runlist, @$args;
		$verb && say "Running \"$cmd @$args\" in toolbox $tb_to_enter...";
	    } else {
		$verb && say "Running \"$cmd\" in toolbox $tb_to_enter...";
	    }
	} else {
	    push @runlist, "enter", $tb_to_enter;
	    $verb && say "Entering toolbox $tb_to_enter...";
	}
	system(@runlist) and $run ? error_die("fail_run", $tb_to_enter, $cmd)
	                          : error_die("fail_enter", $tb_to_enter);
	exit 0;
	
    } else {
	error_die("invalid_syntax");
    }
}

# Checks the output of "podman containers list" to see if a toolbox is running.
# Return true if running, false if not running
sub tb_running ($) {
    die unless defined $_[0];
    my $tb = $_[0];
    # Lists only running toolboxes
    my $output = `podman container list`
      or error_die("podman_fail");
    # Search for toolbox name at the end of a line
    if ($output =~ /\s\s${tb}$/m) {
	return 1;
    } else {
	return 0;
    }
}

# Prints error and dies, with error code determined by hash position.
sub error_die {
    die unless defined $_[0];
    # Optional additional arguments
    my $tb = "TB";
    my $cmd = "CMD";
    $tb = $_[1] if defined $_[1];
    $cmd = $_[2] if defined $_[2];

    
	      
    my %error_msg = (
	"insuf_args" => "Insufficient arguments",
	"too_many_args" => "Too many arguments",
        "missing_tb" => "Missing toolbox parameter",
	"cmd_no_run" => "Missing --run switch",
	"run_no_cmd" => "No command specified to run",
        "list_with_tb" => "List mode used with toolbox argument",
        "list_with_run" => "List mode used with --run switch",
        "dot_not_exist"  => "Config file does not exist",
	"dot_not_readable" => "Config file is not readable",
	"dot_open_fail" => "Failed to open filehandle on config file",
        "invalid_conf" => "Config file is incorrectly formatted",
	"invalid_syntax" => "Invalid syntax",
	"podman_fail" => "Failed to run podman",
        "fail_enter" => "Failed to enter toolbox $tb",
        "fail_run" => "Failed to run command $cmd in toolbox $tb",
		    );
    my $err_code;
    foreach (keys %error_msg) {
	$err_code++;
	last if defined $error_msg{$_[0]};
    }
    say "ERROR: " . $error_msg{$_[0]} and exit $err_code;
}

# Handles dotfile loading. Returns a hash of "toolbox name" => "hostname".
sub load_dotfile ($) {
    my $file = $_[0];
    if (-e $file) {
	if (-r $file) {
	    open DOT, "<$file" or
	      error_die("dot_open_fail");
	} else {
	    error_die("dot_not_readable");
	}
    } else {
	error_die("dot_not_exist");
    }
    my @order;
    while (<DOT>) {
	my ($name, $host) = split /\s+/;
	chomp $name if defined $name;
	chomp $host if defined $host;
	if (!defined $name && !defined $host) {
	    error_die("invalid_conf");
	} elsif (!defined $host) {
	    $host = $name;  # Default to toolbox name
	}
	push @order, { $name => $host };
    }
    close DOT;
    return @order;
}

# This code block handles arguments and input validation.
{
    if (!defined $ARGV[0]) {
        error_die("insuf_args");
    }
    my ($run, $list, $verb, $dbg, $force, $tb) = (0) x 6;  # Init to 0
    my $cmd;
    my @args;
    GetOptions('run'     => \$run,
	       'list'    => \$list,
	       'verbose' => \$verb,
               'debug'   => \$dbg,
	       'force'   => \$force);

    $verb = 1 if $dbg;

    unless ($list) {
        $tb = shift;           # Toolbox to enter
	$cmd = shift if $run;  # Command to run

	error_die("missing_tb")
	  unless $tb;

	# Catch some edge cases
	if ($run) {
	    if (!$cmd) {
		error_die("run_no_cmd");
	    }
	} else {
	    if (($cmd or @ARGV) && $tb) {
		error_die("cmd_no_run");
	    }
	}
    } else {  # We're in list mode
	if ($tb) {
	    error_die("list_with_tb") if $tb;
	} elsif ($run) {
	    error_die("list_with_run") if $run;
	}
    }
    exit(main($run, $list, $verb, $dbg, $force, $tb, $cmd, \@ARGV));
}

